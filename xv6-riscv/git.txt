ローカル環境での変更点をリモートリポジトリに反映する手順は次の通りです：

1. **変更のステージング**：
   ファイルの変更があれば、まずそれらの変更をステージングします。これには `git add` コマンドを使用します。

   git add ファイル名

   または、変更したすべてのファイルを一度にステージングするには、次のコマンドを使います。

   git add .
   workspace作成初めのときはgitignoreを-fオプションで無効化したほうがよい？
   git add . -f

	ステージング（ステージングエリアまたはインデックスとも呼ばれます）の履歴を見るには、
	`git status` コマンドを使用します。このコマンドは、現在のブランチのステータスやステージングエリアにある変更の状態を表示します。
	ただし、ステージングエリア自体の詳細な履歴を直接表示するコマンドはありません。
	ステージングエリアの内容を確認するには、以下の手順を行います。

	1. **`git status` を実行**：
	   最初に、現在のステージングエリアの状態を確認します。

	   git status


	2. **ステージングエリアの変更を確認**：
	   `git status` の出力で、ステージングエリアにある変更が表示されます。ステージングエリアに変更がある場合は、その変更が表示されます。

	3. **変更内容を確認**：
	   ステージングエリアにある各変更について、具体的な変更内容を確認するためには、ファイルごとに `git diff` コマンドを使用します。たとえば、特定のファイルのステージングエリアと最後のコミットとの差分を表示する場合は、次のようにします。

	   git diff --cached ファイル名

	   ステージングエリアにステージングされたすべての変更を見る場合は、次のコマンドを使います。

	   git diff --cached


	これらの手順を実行することで、ステージングエリアにある変更の履歴や具体的な変更内容を確認できます。



2. **変更のコミット**：
   ステージングされた変更をコミットして、ローカルリポジトリに反映します。コミットメッセージは変更内容を簡潔に説明するものです。

   git commit -m "コミットメッセージ"


	ローカルリポジトリのコミット履歴を確認するには、`git log` コマンドを使用します。
	このコマンドは、コミットの履歴を表示し、各コミットに関する情報
	（コミットハッシュ、著者、日時、コミットメッセージなど）を含んでいます。
	基本的な `git log` コマンドの使い方は次の通りです：

	git log


	このコマンドを実行すると、リポジトリの全てのコミット履歴が、最新のものから順に表示されます。
	表示される情報には、コミットハッシュ（SHA-1ハッシュ）、著者（Author）、コミッター（Committer）、
	コミット日時（Date）、コミットメッセージ（Commit Message）などが含まれます。
	`git log` コマンドには、さまざまなオプションを指定して表示内容をカスタマイズすることもできます。
	以下に一部のオプションを示します：

	- `--oneline`：各コミットを1行で表示します。

	  git log --oneline


	- `--graph`：コミット履歴をグラフィカルに表示します。

	  git log --graph


	- `--decorate`：ブランチやタグの情報を表示します。

	  git log --decorate


	- `--author`：特定の著者のコミットのみ表示します。

	  git log --author="著者の名前"


	- `--since`、`--until`：特定の日時範囲内のコミットのみ表示します。

	  git log --since="2023-01-01" --until="2023-12-31"
 

	これらのオプションを組み合わせて使用することで、必要に応じてコミット履歴を詳細に調査できます。


3. **リモートリポジトリの更新**：
   ローカルリポジトリの変更をリモートリポジトリに反映させるには、`git push` コマンドを使用します。この際、リモートリポジトリの名前とブランチ名を指定します。

   git push origin ブランチ名

   たとえば、デフォルトのリモートリポジトリ名が `origin` で、ブランチ名が `main` の場合は、次のようになります。

   git push origin main


	これらの手順を順に実行することで、ローカル環境での変更点をリモートリポジトリに反映させることができます。
	リモートリポジトリのログを確認するには、`git log` コマンドをリモートリポジトリに対して直接使用することはできません。
	なぜなら、`git log` は通常、ローカルリポジトリでのみ使用されるコマンドだからです。
	しかし、リモートリポジトリのログを確認するためには、リモートリポジトリから最新の情報をローカルに取得し、
	その後で `git log` コマンドを使って確認することが一般的です。

	以下に、リモートリポジトリのログを確認する手順を示します：

	1. **リモートリポジトリの最新情報を取得**：
	   リモートリポジトリから最新の情報をローカルに取得するために、`git fetch` コマンドを使用します。

	   git fetch origin

	   ここで、`origin` はリモートリポジトリの名前です。通常、`origin` が
	   デフォルトのリモートリポジトリの名前ですが、別の名前を使用している場合はその名前を指定してください。

	2. **リモートリポジトリのブランチを確認**：
	   `git fetch` コマンドを実行した後は、リモートリポジトリのブランチを確認することができます。
	   `git branch -r` コマンドを使用すると、リモートリポジトリのブランチ一覧が表示されます。

	   git branch -r

	3. **リモートリポジトリのログを確認**：
	   ローカルに取得したリモートリポジトリのブランチをチェックアウトしてから、`git log` コマンドを使用してリモートリポジトリのログを確認します。
	たとえば、リモートリポジトリの `main` ブランチのログを確認する場合は、次のようにします。

	   git checkout practice_C1_1
	   git log

	   ログを確認した後は、必要に応じて他のブランチに切り替えてログを確認することもできます。

	このようにして、リモートリポジトリのログを確認することができます。
	ただし、リモートリポジトリのログを確認する際には、ローカルに取得した最新の情報を元にログが表示されることに注意してください。






作業ブランチの作成方法
まず、ローカルリポジトリ内の `main` ブランチから `practice_C1_1` という名前の新しい作業用ブランチを作成する手順を説明します。

	1. **main ブランチに移動する**：
	   ターミナルまたはコマンドプロンプトを開き、xv6フォルダに移動します。
	　　xv6フォルダがリポジトリのルートディレクトリである場合は、このステップをスキップしてください。

	   cd path/to/xv6


	2. **main ブランチにチェックアウトする**：
	   main ブランチに移動します。これは新しいブランチを main ブランチから切り出す準備作業です。

	   git checkout main

	3. **新しい作業用ブランチを作成する**：
	   新しい作業用ブランチを作成し、それに切り替えます。

	   git checkout -b practice_C1_1

	このコマンドは、`-b` オプションを使用して新しいブランチを作成し、それに直接切り替えることを意味しています。

	4. **ブランチの作成と切り替えの確認**：
	   新しいブランチが正常に作成され、現在の作業ブランチが `practice_C1_1` に切り替わったことを確認します。


	   git branch

	このコマンドを実行すると、作成されたすべてのブランチが表示され、現在の作業ブランチには `*` マークが付いているはずです。
	これで、`main` ブランチから `practice_C1_1` という名前の新しい作業用ブランチを作成し、
	そのブランチに切り替えることができました。作業を終えた後は、必要に応じて変更をコミットし、
	リモートリポジトリにプッシュすることができます。
　　　　git push origin practice_C1_1


	git logコマンドを実行した結果から、ローカルリポジトリには複数のブランチが存在しています。
	具体的には、practice_C1_1ブランチが現在のHEADであり、
	その他にもorigin/practice_C1_1、origin/main、origin/HEAD、mainといったブランチが存在しています。
	これらはローカルブランチとリモートブランチの対応関係を示しています。

https://github.com/b-matsuda/xv6_study/tree/main/xv6-riscv


https://qiita.com/rattcv/items/1e8f841fff7444b29073




